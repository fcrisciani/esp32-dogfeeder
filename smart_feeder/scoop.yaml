# Button configuration
button:
  # Button to gradually change the servo position from -100 to 100 and back
  - platform: template
    name: "Gradually Change Servo Position"
    on_press:
      then:
        # Reset position to -100 at the start
        - lambda: |-
            id(servo_position).publish_state(-100.0);
        # Repeat 200 times to increment the position
        - repeat:
            count: 200
            then:
              - lambda: |-
                  // Simplified calculation: just add 1 to current position
                  float position = id(servo_position).state + 1.0;
                  position = std::min(position, 100.0); // Safety check
                  id(servo_position).publish_state(position);
              # Delay to spread over 20 seconds (20s / 200 steps)
              - delay: 50ms
        # Wait for 3 seconds
        - delay: 3s
        # Reset position to 100 before decrementing
        - lambda: |-
            id(servo_position).publish_state(100.0);
        # Repeat 200 times to decrement the position
        - repeat:
            count: 200
            then:
              - lambda: |-
                  // Simplified calculation: just subtract 1 from current position
                  float position = id(servo_position).state - 1.0;
                  position = std::max(position, -100.0); // Safety check
                  id(servo_position).publish_state(position);
              # Delay to spread over 20 seconds (20s / 200 steps)
              - delay: 50ms

  # Button to move servo to target position, wait, and return
  - platform: template
    name: "Move Servo and Return"
    on_press:
      then:
        # Move servo to target position
        - lambda: |-
            float target = id(quick_servo_target);
            // Update the servo position
            id(servo_position).publish_state(target);
        # Wait for 5 seconds
        - delay: 5s
        # Move servo back to return position
        - lambda: |-
            float return_pos = id(quick_servo_return);
            // Update the servo position
            id(servo_position).publish_state(return_pos);

  # Button with wiggle motion at beginning
  - platform: template
    name: "Wiggle Servo Movement"
    on_press:
      then:
        - lambda: |-
            // Get starting and target positions
            float start_pos = id(quick_servo_target);
            float end_pos = id(quick_servo_return);
            float current_pos = start_pos;
            float wiggle_end_threshold = start_pos + 50.0;
            
            // Start by moving to the initial position
            id(servo_position).publish_state(start_pos);
            
            // Wait for servo to get to initial position
            delay(200);
            
            // Perform wiggles until we've moved 50 degrees
            while (current_pos < wiggle_end_threshold) {
              // Forward movement (bigger steps)
              current_pos += 10.0;
              id(servo_position).publish_state(current_pos);
              delay(150);
              
              // Backward movement (smaller steps for net forward progress)
              current_pos -= 5.0;
              id(servo_position).publish_state(current_pos);
              delay(150);
            }
            
            // Complete movement to final position
            id(servo_position).publish_state(end_pos);
            
            // Wait for 3 seconds
            delay(3000);
            
            // Return to the starting position
            id(servo_position).publish_state(start_pos);
        # Return to the original position (redundant with lambda but kept for safety)
        - lambda: |-
            id(servo_position).publish_state(id(quick_servo_target));
