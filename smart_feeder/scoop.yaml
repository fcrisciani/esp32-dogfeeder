# Button configuration
button:
  # Button to move servo to target position, wait, and return
  - platform: template
    name: "Move Servo and Return"
    on_press:
      then:
        # Move servo to target position using the state from the HA helper
        - lambda: |-
            float target = id(servo_target).state;
            id(servo_position).publish_state(target);
        # Wait for 5 seconds
        - delay: 5s
        # Move servo back to return position using the state from the HA helper
        - lambda: |-
            float return_pos = id(servo_return).state;
            id(servo_position).publish_state(return_pos);

  # Button to wiggle servo until threshold
  - platform: template
    name: "Wiggle Until Threshold"
    on_press:
      then:
        # 1) Start at servo_return
        - lambda: |-
            id(servo_position).publish_state(id(servo_return).state);
        # 2) Wiggle until servo_position passes servo_wiggle
        - while:
            condition:
              lambda: |-
                return id(servo_position).state < id(servo_wiggle).state;
            then:
              - lambda: |-
                  float pos = id(servo_position).state + 10.0;
                  id(servo_position).publish_state(std::min(100.0f, pos));
              - delay: 200ms
              - lambda: |-
                  float pos = id(servo_position).state - 6.0;
                  id(servo_position).publish_state(std::max(-100.0f, pos));
              - delay: 200ms
        # 3) Continue to servo_target
        - lambda: |-
            id(servo_position).publish_state(id(servo_target).state);
        # 4) Wait 5s
        - delay: 5s
        # 5) Return back to servo_return
        - lambda: |-
            id(servo_position).publish_state(id(servo_return).state);

  # Button to trigger the servo wiggle using a repeat loop and publish_state
  - platform: template
    name: "Wiggle Servo (Repeat)"
    id: wiggle_servo_button_repeat
    on_press:
      then:
        - repeat:
            count: !lambda 'return (int)id(servo_wiggle_shakes).state;'
            then:
              - lambda: |-
                  auto clamp = [](float v) { return std::max(-100.0f, std::min(100.0f, v)); };
                  float return_pos = id(servo_return).state;
                  float wiggle = id(servo_wiggle_range).state / 2.0f;
                  id(servo_position).publish_state(clamp(return_pos - wiggle));
              - delay: 100ms
              - lambda: |-
                  auto clamp = [](float v) { return std::max(-100.0f, std::min(100.0f, v)); };
                  float return_pos = id(servo_return).state;
                  float wiggle = id(servo_wiggle_range).state / 2.0f;
                  id(servo_position).publish_state(clamp(return_pos + wiggle));
              - delay: 100ms
        - lambda: 'id(servo_position).publish_state(id(servo_return).state);'
