globals:
  - id: quick_servo_target
    type: float
    restore_value: no
    initial_value: '90.0'
  - id: quick_servo_return
    type: float
    restore_value: no
    initial_value: '-90.0'

# Button configuration
button:
  # Button to gradually change the servo position from -100 to 100 and back
  - platform: template
    name: "Gradually Change Servo Position"
    on_press:
      then:
        # Log the start of gradual servo position change
        - logger.log: "Starting gradual servo position change from -100 to 100"
        # Reset position to -100 at the start
        - lambda: |-
            id(servo_position).publish_state(-100.0);
        # Repeat 200 times to increment the position
        - repeat:
            count: 200
            then:
              - lambda: |-
                  float position = -100.0 + (id(servo_position).state + 100.0); // Start from current progress
                  position = std::min(position + 1.0, 100.0); // Ensure we don't exceed 100
                  id(servo_position).publish_state(position);
              # Delay to spread over 20 seconds (20s / 200 steps)
              - delay: 50ms
        # Wait for 3 seconds
        - delay: 3s
        # Log the start of gradual servo position change back to -100
        - logger.log: "Starting gradual servo position change back to -100"
        # Reset position to 100 before decrementing
        - lambda: |-
            id(servo_position).publish_state(100.0);
        # Repeat 200 times to decrement the position
        - repeat:
            count: 200
            then:
              - lambda: |-
                  float position = 100.0 - (100.0 - id(servo_position).state); // Start from current progress
                  position = std::max(position - 1.0, -100.0); // Ensure we don't go below -100
                  id(servo_position).publish_state(position);
              # Delay to spread over 20 seconds (20s / 200 steps)
              - delay: 50ms

  # Button to move the servo using global degree variables
  - platform: template
    name: "Quick Servo Movement"
    on_press:
      then:
        - logger.log: !lambda "return \"Moving servo to \" + String(id(quick_servo_target)) + \" degrees\";"
        - lambda: |-
            id(servo_position).publish_state(id(quick_servo_target));
        - delay: 3s
        - logger.log: !lambda "return \"Returning servo to \" + String(id(quick_servo_return)) + \" degrees\";"
        - lambda: |-
            id(servo_position).publish_state(id(quick_servo_return));