# Substitutions for reusable variables
substitutions:
  name: esphome-dog-feeder
  friendly_name: dog feeder

# Include other configuration files
packages:
  scoop: !include scoop.yaml
  #schedules: !include schedules.yaml

# ESPHome configuration
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: dogfeeder.esphome
    version: '1.0'
  on_boot:
    priority: 500  # Lower priority than our UI update
    then:
      - logger.log: "reset position!"
      - servo.write: 
          id: my_servo
          level: -100%

# Enable logging for debugging
logger:

# Enable a web server for device monitoring
web_server:

# Enable captive portal for easier Wi-Fi setup
captive_portal:

# Enable Home Assistant API for integration
api:

# Enable OTA updates for firmware updates
ota:
  # Specify OTA platform
  platform: esphome

# Example configuration entry
servo:
  - id: my_servo
    output: pwm_output
    restore: true  # Add this to remember last position on restart

# Example output platform
# On ESP32, use ledc output
output:
  - platform: ledc
    id: pwm_output
    pin: GPIO27
    frequency: 50 Hz

# Slider configuration for controlling servo position
number:
  - platform: template
    name: "Servo Current Position"
    id: servo_position
    # Minimum slider valueue: -100
    step: 1
    min_value: -100
    max_value: 100
    on_value:
      - servo.write: 
          id: my_servo
          level: !lambda ' return x / 100.0;'
    optimistic: True
  - platform: template
    name: "Servo Target Position"
    id: quick_servo_target
    min_value: -100
    max_value: 100
    step: 1
    initial_value: 80.
    optimistic: false  # Let ESPHome handle the state
    set_action:
      - lambda: |-
          id(quick_servo_target) = x;
          id(quick_servo_target).publish_state(x);

  - platform: template
    name: "Servo Return Position"
    id: quick_servo_return
    min_value: -100
    max_value: 100
    step: 1
    initial_value: -90
    optimistic: false  # Let ESPHome handle the state
    set_action:
      - lambda: |-
          id(quick_servo_return) = x;
          id(quick_servo_return).publish_state(x);

  - platform: template
    name: "Servo wiggle threshold"
    id: quick_servo_wiggle
    min_value: -100
    max_value: 100
    step: 1
    initial_value: -60
    optimistic: false  # Let ESPHome handle the state
    set_action:
      - lambda: |-
          id(quick_servo_wiggle) = x;
          id(quick_servo_wiggle).publish_state(x);

# Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time
